<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myboot.review.dao.ReviewDAO">
	<resultMap id="reviewResult" type="reviewVO">
		<result property="level" column="LVL" />
		<result property="reviewNO" column="review_num" />
		<result property="parentNO" column="parentNO" />
		<result property="title" column="review_title" />
		<result property="con" column="review_con" />
		<result property="rate" column="review_star" />
		<result property="date" column="review_date" />
		<result property="image" column="review_image_url" />
		<result property="rec" column="review_rec" />
		<result property="rating" column="rating" />
		<result property="res_num" column="RESERVATION_NUM" />
		<result property="id" column="user_id" />
		<result property="ROOM_GRADE" column="ROOM_GRADE" />
		<result property="like_cnt" column="like_cnt" />
		<result property="user_review_flg" column="user_review_flg" />

	</resultMap>


	<resultMap id="reserveResult" type="reservationVO">
		<result property="res_num" column="RESERVATION_NUM" />
		<result property="res_st" column="RESERVATION_ST" />
		<result property="res_end" column="RESERVATION_END" />
		<result property="user_id" column="user_id" />
		<result property="res_comment" column="RS_COMMENT" />
		<result property="totalCost" column="TOTAL_COST" />
		<result property="payTime" column="PAY_TIME" />
		<result property="res_state" column="RESERVATION_STATE" />
		<result property="pet_name" column="pet_name" />
		<result property="re_num" column="re_num" />
	</resultMap>


	<resultMap id="imgResult" type="imageVO">
		<result property="imageFileNO" column="imageFileNO" />
		<result property="reviewNO" column="review_num" />
		<result property="imageFileName" column="imageFileName" />
	</resultMap>


	<resultMap id="searchResult" type="java.util.HashMap">
		<result property="res_st" column="reservation_st" />
		<result property="res_state" column="reservation_state" />
		<result property="res_num" column="reservation_num" />
		<result property="user_name" column="user_name" />
		<result property="user_tel" column="user_tel" />
		<result property="pet_name" column="pet_name" />
		<result property="user_id" column="user_id" />
		<result property="payTime" column="PAY_TIME" />
		<result property="pet_num" column="PET_NUM" />
	</resultMap>




	<select id="selectAllReviewList2" parameterType="java.util.Map"
		resultMap="reviewResult">

		SELECT * FROM (
		SELECT ROWNUM as recNum, LVL, review_num, review_title, user_id, review_Date
		,review_rec , review_star, review_image_url, ROOM_GRADE,
		<if test="user_id != null">
			user_review_flg,
		</if>
		like_cnt
		from (select LEVEL as LVL,
		RE.review_num,
		RE.review_title,
		RE.user_id,
		RE.review_Date ,
		RE.review_rec ,
		RE.review_star,
		RE.review_image_url,
		RE.ROOM_GRADE,

		<!-- 로그인 유무를 판단하고 user_review_flg는 유저가 좋아요를 눌렸는지 판단하는 플래그가 됨 -->
		<if test="user_id != null">
			case when like_user_table.review_num IS NULL THEN 'N' ELSE 'Y' END AS
			user_review_flg,
		</if>

		like_table.like_cnt as like_cnt

		from TB_REVIEW RE

		<!-- like_cnt 좋아요 갯수 총 카운트 -->
		left join
		(
		SELECT review_num, count(0) as like_cnt
		FROM TB_LIKE
		GROUP BY review_num
		)
		like_table ON like_table.review_num = RE.review_num



		<if test="user_id != null">
			left join
			(
			SELECT review_num
			FROM TB_LIKE
			WHERE user_id = #{user_id}
			)
			like_user_table ON like_user_table.review_num = RE.review_num
		</if>



		where RE.ROOM_GRADE = 'Suite'

		START WITH RE.parentNO is null
		CONNECT BY PRIOR RE.review_num = RE.parentNO
		ORDER SIBLINGS BY

		<choose>
			<when test="sort == 'data'">
				RE.review_Date desc NULLS LAST
			</when>

			<when test="sort == 'rec'">
				like_table.like_cnt desc NULLS LAST
			</when>

			<otherwise>
				RE.review_Date desc NULLS LAST
			</otherwise>
		</choose>
		)
		)
		where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and
		(#{section}-1)*100+#{pageNum}*10


	</select>

	<select id="selectAllReviewList3" parameterType="java.util.Map"
		resultMap="reviewResult">

		SELECT * FROM (
		SELECT ROWNUM as recNum, LVL, review_num, review_title, user_id, review_Date
		,review_rec , review_star, review_image_url, ROOM_GRADE,
		<if test="user_id != null">
			user_review_flg,
		</if>
		like_cnt
		from (select LEVEL as LVL,
		RE.review_num,
		RE.review_title,
		RE.user_id,
		RE.review_Date,
		RE.review_rec,
		RE.review_star,
		RE.review_image_url,
		RE.ROOM_GRADE,

		<!-- 로그인 유무를 판단하고 user_review_flg는 유저가 좋아요를 눌렸는지 판단하는 플래그가 됨 -->
		<if test="user_id != null">
			case when like_user_table.review_num IS NULL THEN 'N' ELSE 'Y' END AS
			user_review_flg,
		</if>

		like_table.like_cnt as like_cnt

		from TB_REVIEW RE

		<!-- like_cnt 좋아요 갯수 총 카운트 -->
		left join
		(
		SELECT review_num, count(0) as like_cnt
		FROM TB_LIKE
		GROUP BY review_num
		)
		like_table ON like_table.review_num = RE.review_num



		<if test="user_id != null">
			left join
			(
			SELECT review_num
			FROM TB_LIKE
			WHERE user_id = #{user_id}
			)
			like_user_table ON like_user_table.review_num = RE.review_num
		</if>



		where RE.ROOM_GRADE = 'Superior'

		START WITH RE.parentNO is null
		CONNECT BY PRIOR RE.review_num = RE.parentNO
		ORDER SIBLINGS BY

		<choose>
			<when test="sort == 'data'">
				RE.review_Date desc NULLS LAST
			</when>

			<when test="sort == 'rec'">
				like_table.like_cnt desc NULLS LAST
			</when>

			<otherwise>
				RE.review_Date desc NULLS LAST
			</otherwise>
		</choose>
		)
		)
		where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and
		(#{section}-1)*100+#{pageNum}*10


	</select>

	<select id="selectTotReview" resultType="int">
	  <![CDATA[
	  	select count(review_num) from tb_review
	  ]]>
	</select>

	<select id="selectAllReviewList" parameterType="java.util.Map"
		resultMap="reviewResult">

		SELECT * FROM (
		SELECT ROWNUM as recNum, LVL, review_num, review_title, user_id, review_Date
		,review_rec , review_star, review_image_url, ROOM_GRADE,
		<if test="user_id != null">
			user_review_flg,
		</if>
		like_cnt
		from (select LEVEL as LVL,
		RE.review_num,
		RE.review_title,
		RE.user_id,
		RE.review_Date ,
		RE.review_rec ,
		RE.review_star,
		RE.review_image_url,
		RE.ROOM_GRADE,

		<!-- 로그인 유무를 판단하고 user_review_flg는 유저가 좋아요를 눌렸는지 판단하는 플래그가 됨 -->
		<if test="user_id != null">
			case when like_user_table.review_num IS NULL THEN 'N' ELSE 'Y' END AS
			user_review_flg,
		</if>

		like_table.like_cnt as like_cnt
		from TB_REVIEW RE
		<!-- like_cnt 좋아요 갯수 총 카운트 -->
		left join (
		SELECT review_num, count(0) as like_cnt
		FROM TB_LIKE
		GROUP BY review_num
		)like_table ON like_table.review_num = RE.review_num


		<if test="user_id != null">
			left join
			(
			SELECT review_num
			FROM TB_LIKE
			WHERE user_id = #{user_id}
			)
			like_user_table ON like_user_table.review_num = RE.review_num
		</if>

		where RE.ROOM_GRADE = 'Deluxe'
		START WITH RE.parentNO is null
		CONNECT BY PRIOR RE.review_num = RE.parentNO
		ORDER SIBLINGS BY

		<choose>
			<when test="sort == 'data'">
				RE.review_Date desc NULLS LAST
			</when>

			<when test="sort == 'rec'">
				like_table.like_cnt desc NULLS LAST
			</when>

			<otherwise>
				RE.review_Date desc NULLS LAST
			</otherwise>
		</choose>
		)
		)
		where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and
		(#{section}-1)*100+#{pageNum}*10

	</select>
	<!-- 리뷰 게시판 조회 끝 -->


	<!-- 마이페이지 내 리뷰 조회 -->
	<select id="selectAllMyReviewList" parameterType="java.util.Map"
		resultMap="reviewResult">  
		<![CDATA[
			SELECT * FROM ( 
					SELECT ROWNUM as recNum, LVL, review_num,  review_title, user_id, review_Date ,review_rec , review_star, review_image_url, ROOM_GRADE  
						from (select LEVEL as LVL,  review_num,  review_title, user_id, review_Date ,review_rec ,review_star, review_image_url, ROOM_GRADE 
								from TB_REVIEW
								where user_id = #{user_id}	
			                    START WITH  parentNO is null
								CONNECT BY PRIOR review_num = parentNO
								ORDER SIBLINGS BY review_num DESC)
								)                         
							    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
									
								]]>
	</select>

	<select id="selectAllMyReviewList2"
		parameterType="java.util.Map" resultMap="reviewResult">  
		<![CDATA[
			SELECT * FROM ( 
					SELECT ROWNUM as recNum, LVL, review_num,  review_title, user_id,review_Date ,review_rec , review_star, review_image_url, ROOM_GRADE  
						from (select LEVEL as LVL,  review_num,  review_title, user_id,review_Date ,review_rec ,review_star, review_image_url, ROOM_GRADE 
								from TB_REVIEW
			                    START WITH  parentNO is null
								CONNECT BY PRIOR review_num = parentNO
								ORDER SIBLINGS BY review_num DESC)
								)                         
							    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
									
								]]>
	</select>

	<!-- 마이페이지 내 리뷰 조회 끝 -->


	<!-- CRUD -->
	
	<select id="selectReview" resultMap="reviewResult"
		parameterType="int">
	    <![CDATA[
	      SELECT * from tb_review
	      where review_num = #{reviewNO}		
	    ]]>
	</select>
	
	<select id="selectNewReviewNO" resultType="int">
		<![CDATA[
			SELECT  nvl(max(REVIEW_NUM), 0) + 1 from tb_review		
		]]>
	</select>

	<insert id="insertNewReview" parameterType="java.util.Map">
	    <![CDATA[
	      insert into tb_review(review_num, user_id, review_title, review_star,review_rec, review_date ,RESERVATION_NUM, review_image_url ,ROOM_GRADE)
	      values(#{reviewNO}, #{id}, #{title}, #{rate}, #{rec}, sysdate, #{res_num}, #{review_image_url, jdbcType=VARCHAR}, #{ROOM_GRADE, jdbcType=VARCHAR})
	    ]]>
	</insert>

	<update id="updateReview" parameterType="java.util.Map">
		update tb_review
		set review_title=#{title}
		<if
			test="review_image_url !='resources/review/review_image/'+reviewNO+'/'">
			, review_image_url=#{review_image_url}
		</if>
		where review_num=#{reviewNO}
	</update>

	<delete id="deleteReview" parameterType="int">
	    <![CDATA[
	      delete from tb_review
	      where review_num in (
	         SELECT review_num FROM  tb_review
	         START WITH review_num = #{review_num}
	       	 CONNECT BY PRIOR  review_num = parentNO)
	     
	    ]]>
	</delete>
	<!-- CRUD 끝 -->



	<!-- 예약 확인 -->
	
	<select id="selectAllResList" parameterType="String"
		resultMap="reserveResult">  
		<![CDATA[
		
						
			    SELECT res.RESERVATION_NUM, res.RESERVATION_ST, res.user_id, res.RESERVATION_STATE , max(pet.pet_name）as pet_name , MAX(re.RESERVATION_NUM) as re_num
						FROM tb_reservation res
						left join tb_petservice pet
		                on res.RESERVATION_NUM = pet.RESERVATION_NUM
		                left join tb_review re
		               	on res.RESERVATION_NUM = re.RESERVATION_NUM
						where res.user_id = #{userId} 
		                GROUP BY res.RESERVATION_NUM,res.RESERVATION_ST, res.USER_ID, res.RESERVATION_STATE, re.RESERVATION_NUM
						order by res.RESERVATION_ST DESC					 
								 
								]]>
	</select>

	<select id="selectAllMyReservesList"
		parameterType="java.util.Map" resultMap="reserveResult">  
		<![CDATA[
		   SELECT * FROM (
		    SELECT ROWNUM AS recNum,  res.RESERVATION_NUM,  res.RESERVATION_ST, res.user_id, res.RESERVATION_STATE , Max（pet_name）as pet_name
						FROM tb_reservation res
						left join tb_petservice pet
		                on res.RESERVATION_NUM = pet.RESERVATION_NUM
		                where res.user_id = #{user_id}	
		                GROUP BY ROWNUM, res.RESERVATION_NUM, res.RESERVATION_ST, res.USER_ID, res.RESERVATION_STATE
						order by RESERVATION_ST asc)        
		                    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
									
								]]>

	</select>

	<select id="selectTotReserves" resultType="int">
	  <![CDATA[
	  	select count(RESERVATION_NUM) from tb_reservation
	  ]]>
	</select>
	<!-- 예약 확인 끝 -->


	<!-- 좋아요 기능 -->
	
	<select id="selectReviewLike" parameterType="int"
		resultType="int">  
		<![CDATA[
		        SELECT count(0) as like_cnt
								  FROM TB_LIKE 
		                          where review_num = #{reviewNO}
		 
								]]>
	</select>

	<select id="selectReviewLikeCheck" parameterType="java.util.Map"
		resultType="int">  
		<![CDATA[
		 			SELECT review_num
		                      FROM TB_LIKE
							  WHERE user_id =  #{id} and review_num = #{reviewNO}
								]]>
	</select>
	
	<insert id="insert_like" parameterType="HashMap">

		insert into TB_LIKE
		(
		likeNO,
		user_id,
		review_num
		)

		values
		(
		(
		SELECT CASE WHEN MAX(likeNO) IS NULL THEN 1 ELSE MAX(likeNO) + 1 END
		FROM TB_LIKE
		),
		#{id},
		#{reviewNO}
		)

	</insert>

	<delete id="delete_like_by_reviewNO" parameterType="HashMap">
		delete from TB_LIKE
		where review_num = #{reviewNO}
	</delete>


	<delete id="delete_like" parameterType="HashMap">
		delete from TB_LIKE
		where user_id = #{id} and review_num = #{reviewNO}
	</delete>
	





	<select id="selectImageFileList" resultMap="imgResult"
		parameterType="int">
	    <![CDATA[
	      SELECT * from tb_review
	      where review_num=#{reviewNO}	
	    ]]>
	</select>



	






















	








	<select id="selectNewImageFileNO" resultType="int">
	    <![CDATA[
	      SELECT  nvl(max(img_num),0) from tb_image		
	    ]]>
	</select>

	<insert id="insertNewImage" parameterType="java.util.Map">
		<foreach item="item" collection="list" open="INSERT ALL"
			separator=" " close="SELECT * FROM DUAL">
			INTO tb_image(img_num, img_name, review_num,
			img_regdata)
			VALUES (#{item.imageFileNO}, #{item.imageFileName},
			#{item.reviewNO},sysdate)
		</foreach>
	</insert>


	<!-- 메인페이지 리뷰조회 -->
	<select id="selectMainReview" resultType="java.util.Map">
		<![CDATA[
			SELECT USER_ID, REVIEW_STAR, REVIEW_TITLE, REVIEW_IMAGE_URL FROM tb_review
   		 		WHERE REVIEW_STAR IS NOT null AND REVIEW_IMAGE_URL IS NOT null
			order by REVIEW_DATE desc
		]]>
	</select>



	
	



</mapper>