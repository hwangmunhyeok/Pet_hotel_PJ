<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
      PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.myboot.review.dao.ReviewDAO">
	<resultMap id="reviewResult" type="reviewVO">
		<result property="level" column="LVL" />
		<result property="reviewNO" column="review_num" />
		<result property="parentNO" column="parentNO" />
		<result property="title" column="review_title" />
		<result property="con" column="review_con" />
		<result property="rate" column="review_star" />
		<result property="date" column="review_date" />
		<result property="image" column="review_image_url" />
		<result property="rec" column="review_rec" />
		<result property="rating" column="rating" />
		<result property="res_num" column="RESERVATION_NUM" />
		<result property="id" column="user_id" />
		<result property="ROOM_GRADE" column="ROOM_GRADE" />
	</resultMap>


<resultMap id="reserveResult" type="reservationVO">
	<result property="res_num" column="RESERVATION_NUM" />
	<result property="res_st" column="RESERVATION_ST" />
	<result property="res_end" column="RESERVATION_END" />
	<result property="user_id" column="user_id" />
	<result property="res_comment" column="RS_COMMENT" />
	<result property="totalCost" column="TOTAL_COST" />
	<result property="payTime" column="PAY_TIME" />
	<result property="res_state" column="RESERVATION_STATE" />
	<result property="pet_name" column="pet_name" />
	<result property="re_num" column="re_num" />
</resultMap> 

	<resultMap id="imgResult" type="imageVO">
		<result property="imageFileNO" column="imageFileNO" />
		<result property="reviewNO" column="review_num" />
		<result property="imageFileName" column="imageFileName" />
	</resultMap>

<resultMap id="searchResult" type="java.util.HashMap">
	<result property="res_st" column="reservation_st" />
	<result property="res_state" column="reservation_state" />
	<result property="res_num" column="reservation_num" />
	<result property="user_name" column="user_name" />
	<result property="user_tel" column="user_tel" />
	<result property="pet_name" column="pet_name" />
    <result property="user_id" column="user_id" />
   	<result property="payTime" column="PAY_TIME" />
 	<result property="pet_num" column="PET_NUM" />
</resultMap> 


  <select  id="selectImageFileList" resultMap="imgResult" parameterType="int">
    <![CDATA[
      SELECT * from tb_review
      where review_num=#{reviewNO}	
    ]]>
    </select>

	<!-- <select id="selectAllReviewList" resultMap="reviewResult" > <![CDATA[ 
		SELECT level as LVL, review_num, review_title, review_con, review_star, review_date, 
		review_image, review_rec, RESERVATION_NUM from tb_review START WITH review_parentNO=0 
		CONNECT BY PRIOR review_num=review_parentNO ORDER SIBLINGS BY review_num 
		DESC ]]> </select> -->


	<select id="selectNewReviewNO" resultType="int">
		<![CDATA[
			SELECT  nvl(max(REVIEW_NUM), 0) + 1 from tb_review		
		]]>
	</select>

	<select id="selectReview" resultMap="reviewResult"
		parameterType="int"> <!--  "review_title"user_id review_num review_con--><!--   SELECT * from tb_review
      where review_num = #{reviewNO}	 -->
    <![CDATA[
      SELECT * from tb_review
      where review_num = #{reviewNO}		
    ]]>
	</select>

	<update id="updateReview" parameterType="java.util.Map">
		update tb_review
		set review_title=#{title}
		<if test="review_image_url !='resources/review/review_image/'+reviewNO+'/'">
			, review_image_url=#{review_image_url}
		</if>
		where review_num=#{reviewNO}
	</update>
	
	

	<delete id="deleteReview" parameterType="int">
    <![CDATA[
      delete from tb_review
      where review_num in (
         SELECT review_num FROM  tb_review
         START WITH review_num = #{review_num}
       	 CONNECT BY PRIOR  review_num = parentNO)
     
    ]]>
	</delete>
	
	
	
	
	<select id="selectAllMyReservesList" parameterType="java.util.Map"
		resultMap="reserveResult">  
<![CDATA[
   SELECT * FROM (
    SELECT ROWNUM AS recNum,  res.RESERVATION_NUM,  res.RESERVATION_ST, res.user_id, res.RESERVATION_STATE , Max（pet_name）as pet_name
				FROM tb_reservation res
				left join tb_petservice pet
                on res.RESERVATION_NUM = pet.RESERVATION_NUM
                where res.user_id = #{user_id}	
                GROUP BY ROWNUM, res.RESERVATION_NUM, res.RESERVATION_ST, res.USER_ID, res.RESERVATION_STATE
				order by RESERVATION_ST asc)        
                    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
							
						]]>


	</select>
	   	 
	<select id="selectAllResList" parameterType="String"
		resultMap="reserveResult">  
<![CDATA[

				
	    SELECT res.RESERVATION_NUM, res.RESERVATION_ST, res.user_id, res.RESERVATION_STATE , max(pet.pet_name）as pet_name , MAX(re.RESERVATION_NUM) as re_num
				FROM tb_reservation res
				left join tb_petservice pet
                on res.RESERVATION_NUM = pet.RESERVATION_NUM
                left join tb_review re
               	on res.RESERVATION_NUM = re.RESERVATION_NUM
				where res.user_id = #{userId} 
                GROUP BY res.RESERVATION_NUM,res.RESERVATION_ST, res.USER_ID, res.RESERVATION_STATE, re.RESERVATION_NUM
				order by res.RESERVATION_ST DESC					 
						 
						]]>


	</select>
	



	<!--다중 이미지 추가 SQL문 -->

	<insert id="insertNewReview" parameterType="java.util.Map">
    <![CDATA[
      insert into tb_review(review_num, user_id, review_title, review_star,review_rec, review_date ,RESERVATION_NUM, review_image_url ,ROOM_GRADE)
      values(#{reviewNO}, #{id}, #{title}, #{rate}, #{rec}, sysdate, #{res_num}, #{review_image_url, jdbcType=VARCHAR}, #{ROOM_GRADE, jdbcType=VARCHAR})
    ]]>
	</insert>



<select id="selectAllMyReviewList" parameterType="java.util.Map"
		resultMap="reviewResult">  
<![CDATA[
	SELECT * FROM ( 
			SELECT ROWNUM as recNum, LVL, review_num,  review_title, user_id, review_Date ,review_rec , review_star, review_image_url, ROOM_GRADE  
				from (select LEVEL as LVL,  review_num,  review_title, user_id, review_Date ,review_rec ,review_star, review_image_url, ROOM_GRADE 
						from TB_REVIEW
						where user_id = #{user_id}	
	                    START WITH  parentNO is null
						CONNECT BY PRIOR review_num = parentNO
						ORDER SIBLINGS BY review_num DESC)
						)                         
					    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
							
						]]>
	</select>



	<select id="selectAllReviewList" parameterType="java.util.Map"
		resultMap="reviewResult">  

	SELECT * FROM ( 
			SELECT ROWNUM as recNum, LVL, review_num,  review_title, user_id, review_Date ,review_rec , review_star, review_image_url, ROOM_GRADE  
				from (select LEVEL as LVL,  review_num,  review_title, user_id, review_Date ,review_rec ,review_star, review_image_url, ROOM_GRADE 
						from TB_REVIEW
						where ROOM_GRADE = 'Deluxe' 
	                    START WITH  parentNO is null
						CONNECT BY PRIOR review_num = parentNO
						ORDER SIBLINGS BY 
	
					    <choose>
					    	<when test="sort =='sort_num'">
					    		review_Date desc
					    	</when>
					        <when test="sort =='sort_rec'">
					    		review_rec asc
					    	</when>
							<otherwise>
					    		 review_num desc
					    	</otherwise>
					    </choose>
						)
						)                         
					    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
							
						
	</select>


	
	
	
	   
	
	
	
		<select id="selectAllReviewList2" parameterType="java.util.Map"
		resultMap="reviewResult">  
<![CDATA[
	SELECT * FROM ( 
			SELECT ROWNUM as recNum, LVL, review_num,  review_title, user_id, review_Date ,review_rec , review_star, review_image_url,ROOM_GRADE
				from (select LEVEL as LVL,  review_num,  review_title, user_id, review_Date ,review_rec ,review_star, review_image_url,ROOM_GRADE
						from TB_REVIEW
						where ROOM_GRADE = 'Suite'
	                    START WITH  parentNO is null
						CONNECT BY PRIOR review_num = parentNO
						ORDER SIBLINGS BY review_num DESC)
						)                         
					    where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
							
						]]>
	</select>
	
		<select id="selectAllReviewList3" parameterType="java.util.Map"
		resultMap="reviewResult">  
<![CDATA[
	SELECT * FROM ( 
			SELECT ROWNUM as recNum, LVL, review_num,  review_title, user_id, review_Date ,review_rec , review_star, review_image_url,ROOM_GRADE
				from (select LEVEL as LVL,  review_num,  review_title, user_id, review_Date ,review_rec ,review_star, review_image_url,ROOM_GRADE
						from TB_REVIEW
						where ROOM_GRADE = 'Superior'
	                    START WITH  parentNO is null
						CONNECT BY PRIOR review_num = parentNO
						ORDER SIBLINGS BY review_num DESC)
						)                         
					    	where recNum between(#{section}-1)*100+(#{pageNum}-1)*10+1 and (#{section}-1)*100+#{pageNum}*10
							
						]]>
	</select>
	
	
	
	

	<select id="selectTotReview" resultType="int">
  <![CDATA[
  	select count(review_num) from tb_review
  ]]>
	</select>

		<select id="selectTotReserves" resultType="int">
  <![CDATA[
  	select count(RESERVATION_NUM) from tb_reservation
  ]]>
	</select>



	<select id="selectNewImageFileNO" resultType="int">
    <![CDATA[
      SELECT  nvl(max(img_num),0) from tb_image		
    ]]>
	</select>

	<insert id="insertNewImage" parameterType="java.util.Map">
		<foreach item="item" collection="list" open="INSERT ALL"
			separator=" " close="SELECT * FROM DUAL">
			INTO tb_image(img_num, img_name, review_num, img_regdata)
			VALUES (#{item.imageFileNO}, #{item.imageFileName}, #{item.reviewNO},
			sysdate)
		</foreach>
	</insert>




	<!-- 메인페이지 리뷰조회 -->
	<select id="selectMainReview" resultType="java.util.Map">
		<![CDATA[
			SELECT USER_ID, REVIEW_STAR, REVIEW_TITLE, REVIEW_IMAGE_URL FROM tb_review
   		 		WHERE REVIEW_STAR IS NOT null AND REVIEW_IMAGE_URL IS NOT null
			order by REVIEW_DATE desc
		]]>
	</select>
	
	
	
	<!-- 좋아요 기능 구현 -->
	
  <update id="like_check" parameterType="HashMap">
    UPDATE tb_like
    SET like_check = like_check + 1 
    WHERE user_id=#{user_id} AND review_num=#{review_num}
  </update>
  
  <update id="like_check_cancel" parameterType="HashMap">
    UPDATE tb_like
    SET like_check = 0
    WHERE user_id=#{user_id} AND review_num=#{review_num}
  </update>
	 
	 
	 
	
</mapper>